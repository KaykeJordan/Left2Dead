[gd_scene load_steps=10 format=3 uid="uid://b7ixuhsq4f7ee"]

[ext_resource type="Script" uid="uid://c4fm3dsph7edj" path="res://Scripts/enemy.gd" id="1_pg2si"]
[ext_resource type="Texture2D" uid="uid://e62ka0qhvc0h" path="res://Sprites/kenney_top-down-shooter/PNG/Zombie 1/zoimbie1_stand.png" id="3_3otx4"]
[ext_resource type="Texture2D" uid="uid://clk57y53611fq" path="res://Sprites/kenney_top-down-shooter/PNG/Zombie 1/zoimbie1_hold.png" id="4_e56ds"]

[sub_resource type="Shader" id="Shader_chyev"]
code = "/*
Rainbow outline by @Farfalk and @ThePadDev, July 2021

Apply to canvas items with transparent backgrounds.
Check that there is sufficient transparent background space for the outline!

CC0 License (but citation is welcome <3)
*/

shader_type canvas_item;

uniform float line_thickness : hint_range(0, 20) = 1.0;    // thickness of the line
uniform float sin_frequency : hint_range(0.1, 2.0) = 0.5;  // frequency of the rainbow
uniform float sin_offset : hint_range(0.0, 360.0) = 0.0;   // offset of the rainbow, useful to differentiate objects using the same shader
uniform float light_offset : hint_range(0.0, 1.0) = 0.5;   // this offsets all color channels; if set to 0 only red green and blue colors will be shown.

void fragment() {
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;

	float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
	outline = min(outline, 1.0);

	vec4 animated_line_color = vec4(light_offset + sin(2.0*3.14*sin_frequency*TIME),
							   light_offset + sin(2.0*3.14*sin_frequency*TIME + radians(120.0)),
							   light_offset + sin(2.0*3.14*sin_frequency*TIME + radians(240.0)),
							   1.0);

	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, animated_line_color, outline - color.a);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ve3x3"]
shader = SubResource("Shader_chyev")
shader_parameter/line_thickness = 1.0
shader_parameter/sin_frequency = 1.0
shader_parameter/sin_offset = 0.0
shader_parameter/light_offset = 0.5

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_etb85"]
height = 44.0

[sub_resource type="SpriteFrames" id="SpriteFrames_pcueo"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_e56ds")
}],
"loop": true,
"name": &"Idle",
"speed": 5.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_2q0yx"]
radius = 19.0
height = 48.0

[sub_resource type="OccluderPolygon2D" id="OccluderPolygon2D_s4dkx"]
polygon = PackedVector2Array(-9, -19, -13, -3, -11, 16, -4, 22, 3, 20, 9, 8, 11, -2, 8, -10, 5, -19, -4, -21)

[node name="Enemy" type="CharacterBody2D"]
collision_layer = 3
collision_mask = 2
script = ExtResource("1_pg2si")

[node name="Sprite2D" type="Sprite2D" parent="."]
visible = false
material = SubResource("ShaderMaterial_ve3x3")
use_parent_material = true
texture = ExtResource("3_3otx4")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2(-1, 0)
shape = SubResource("CapsuleShape2D_etb85")
debug_color = Color(0.27217, 0.569391, 0.748402, 0.42)

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_pcueo")
animation = &"Idle"
autoplay = "Idle"

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
path_postprocessing = 1

[node name="Area2D" type="Area2D" parent="." groups=["Zombie"]]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("CapsuleShape2D_2q0yx")

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
occluder = SubResource("OccluderPolygon2D_s4dkx")
occluder_light_mask = 5

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]

[connection signal="area_entered" from="Area2D" to="." method="_on_area_2d_area_entered"]
